import tkinter as tk
import random

class MazeApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Maze Generator and Solver")

        self.canvas = tk.Canvas(root, width=600, height=600, bg="white")
        self.canvas.pack()

        self.cell_size = 20
        self.rows = self.cols = 30
        self.maze = [[0] * self.cols for _ in range(self.rows)]

        self.start = None
        self.end = None
        self.is_drawing = False

        self.generate_maze()

        self.canvas.bind("<Button-1>", self.on_click)

    def generate_maze(self):
        self.maze = [[1 if random.random() < 0.3 else 0 for _ in range(self.cols)] for _ in range(self.rows)]
        self.draw_maze()

    def draw_maze(self):
        self.canvas.delete("all")
        for row in range(self.rows):
            for col in range(self.cols):
                x1 = col * self.cell_size
                y1 = row * self.cell_size
                x2 = x1 + self.cell_size
                y2 = y1 + self.cell_size
                color = "black" if self.maze[row][col] == 1 else "white"
                self.canvas.create_rectangle(x1, y1, x2, y2, fill=color, outline="gray")

    def on_click(self, event):
        row = event.y // self.cell_size
        col = event.x // self.cell_size
        if self.is_drawing:
            self.end = (row, col)
            self.solve_maze()
            self.is_drawing = False
        else:
            self.start = (row, col)
            self.is_drawing = True
            self.draw_maze()
            self.highlight_cell(self.start, "green")

    def highlight_cell(self, position, color):
        row, col = position
        x1 = col * self.cell_size
        y1 = row * self.cell_size
        x2 = x1 + self.cell_size
        y2 = y1 + self.cell_size
        self.canvas.create_rectangle(x1, y1, x2, y2, fill=color, outline="gray")

    def solve_maze(self):
        if not self.start or not self.end:
            return

        start, end = self.start, self.end
        queue = [start]
        visited = set()
        parent = {start: None}

        while queue:
            current = queue.pop(0)
            if current == end:
                break
            for neighbor in self.get_neighbors(current):
                if neighbor not in visited and self.maze[neighbor[0]][neighbor[1]] == 0:
                    visited.add(neighbor)
                    queue.append(neighbor)
                    parent[neighbor] = current

        path = []
        step = end
        while step:
            path.append(step)
            step = parent[step]

        path.reverse()
        self.draw_maze()
        for cell in path:
            self.highlight_cell(cell, "blue")
        self.highlight_cell(self.start, "green")
        self.highlight_cell(self.end, "red")

    def get_neighbors(self, position):
        row, col = position
        neighbors = []
        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            r, c = row + dr, col + dc
            if 0 <= r < self.rows and 0 <= c < self.cols:
                neighbors.append((r, c))
        return neighbors

if __name__ == "__main__":
    root = tk.Tk()
    app = MazeApp(root)
    root.mainloop()
